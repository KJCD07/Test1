SELECT 
    ROW_NUMBER() OVER (ORDER BY PID) AS [serialNum],
    PID AS PartyID
FROM MACMSIngestionReconcile WITH (NOLOCK) DT
WHERE NOT EXISTS 
(
    SELECT 1
    FROM CFCParty WITH (NOLOCK) CFCP
    WHERE CFCP.PartyID = DT.PID
      AND CFCP.PartyCategory = 'Initial'
      AND EXISTS (
          SELECT 1
          FROM CFCMapping WITH (NOLOCK) CFCM
          INNER JOIN CFCcase WITH (NOLOCK) CFCC ON CFCC.CFCCaseID = CFCM.CFCCaseID
          WHERE CFCM.CFCPartyID = CFCP.ID
            AND CFCC.CreatedDate >= CAST(GETDATE() AS DATE)
            AND CFCC.CreatedDate < DATEADD(DAY, 1, CAST(GETDATE() AS DATE))
      )
)
AND NOT EXISTS 
(
    SELECT 1
    FROM CFCcaseException WITH (NOLOCK) CFCE
    WHERE CFCE.PartyID = DT.PID
      AND CFCE.CreatedDate >= CAST(GETDATE() AS DATE)
      AND CFCE.CreatedDate < DATEADD(DAY, 1, CAST(GETDATE() AS DATE))
);


*********************************************


The file contains two columns that are related to DateTime values: the Customer Date of Birth (Column 11) and the Created Date (Column 21). While these columns are populated with valid DateTime values when the file is opened, the MSB application is throwing the error message: "Invalid DateTime Cell."

Upon further investigation, we discovered that the issue arises from the cell format of the Created Date column. Although the column displays valid DateTime values, the Excel cell format is not correctly set for DateTime. Instead, it appears to be mapped to the general cell format, causing the DateTime values to be interpreted as whole numbers. This results in the error when the MSB application attempts to process the file.

To resolve this, I recommend ensuring that both the Customer Date of Birth and Created Date columns are correctly formatted as DateTime in Excel. This should prevent the MSB application from interpreting the DateTime values as numbers, allowing the file to be processed without errors.




*********************************************************
DECLARE @html NVARCHAR(MAX);

-- Create an HTML table with styles
SET @html = 
N'<table border="1" cellpadding="6" cellspacing="0" style="border-collapse: collapse; font-family: Segoe UI; font-size: 13px;">' +
N'<tr style="background-color:#d3d3d3;">' +
N'<th>EmpID</th><th>EmpName</th><th>DeptName</th></tr>';

-- Add combined rows using ROW_NUMBER for alignment
;WITH A AS (
    SELECT ROW_NUMBER() OVER (ORDER BY EmpID) AS rn, EmpID, EmpName FROM Employee
), B AS (
    SELECT ROW_NUMBER() OVER (ORDER BY DeptName) AS rn, DeptName FROM Department
)
SELECT @html = @html + 
    (SELECT 
        td = CAST(A.EmpID AS NVARCHAR), '',
        td = A.EmpName, '',
        td = B.DeptName
     FROM A
     FULL OUTER JOIN B ON A.rn = B.rn
     FOR XML PATH('tr'), TYPE).value('.', 'NVARCHAR(MAX)');

-- Close the table
SET @html = @html + N'</table>';

-- Output (for testing or email body)
PRINT @html;

