using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        List<string> names = new List<string>() { "Alice", "Bob", "Charlie" };

        foreach (string name in names)
        {
            if (name == "Bob")
            {
                names.Remove(name);
            }
        }

        Console.WriteLine("Names after removal:");
        foreach (string name in names)
        {
            Console.WriteLine(name);
        }
    }
}





You're modifying a collection (List<string> names) while iterating over it using foreach.

‚ùó This throws a InvalidOperationException at runtime:

"Collection was modified; enumeration operation may not execute."


How to Fix It
Option 1: Iterate backwards using a for loop:

for (int i = names.Count - 1; i >= 0; i--)
{
    if (names[i] == "Bob")
    {
        names.RemoveAt(i);
    }
}
Option 2: Use RemoveAll:

names.RemoveAll(name => name == "Bob");




*******************

 static void Main(string[] args)
    {
        List<string> names = new List<string>() { "Alice", "Bob", "Charlie" };

        names.RemoveAll(name => name == "Bob");

        Console.WriteLine("Names after removal:");
        foreach (string name in names)
        {
            Console.WriteLine(name);
        }
    }

*********************************************************




string message = null;
Console.WriteLine("Message length is: " + message.Length);
‚ùó Problem:
You're accessing .Length on a null object, which will throw a NullReferenceException.


*********************************************************************


Use GC.Collect() Only for Debugging
Avoid using GC.Collect() in production code ‚Äî it forces collection and affects performance.

*******************************************************************

2. Avoid Event Handler Leaks
Event handlers can keep subscribers alive longer than needed.

‚ùå Don‚Äôt:

publisher.SomeEvent += subscriber.Method;
‚úÖ Do:
Unsubscribe when no longer needed:


publisher.SomeEvent -= subscriber.Method;


**********************************************************************************

Dispose Unmanaged Resources Properly
Always call Dispose() on objects like:

SqlConnection, Stream, FileStream, HttpClient, etc.

üîß Solution:
Use using blocks or implement IDisposable.


using (var conn = new SqlConnection("..."))
{
    conn.Open();
    // Do work
}
*****************************************************************************


 How do you define endpoints in ASP.NET Core?
‚úÖ Answer:
Endpoints are defined using routing in Startup.cs or Program.cs.

Example:


app.MapControllerRoute(
    name: "default",
    pattern: "api/{controller=Home}/{action=Index}/{id?}");
Or in Minimal API (ASP.NET Core 6+):


app.MapGet("/api/hello", () => "Hello World!");

*****************************************************************************************

1. Bug: Division by Zero

int a = 10;
int b = 0;
int result = a / b;
Console.WriteLine(result);
‚ùå Problem:
This throws a DivideByZeroException


****************************************************************************

string input = "yes";
if (input == "YES")
{
    Console.WriteLine("Confirmed");
}
‚ùå Problem:
C# string comparison is case-sensitive by default.

*********************************************************************





