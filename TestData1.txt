-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\ArchiveFolder\'; -- Set your folder path here
DECLARE @Command NVARCHAR(500);
DECLARE @Files TABLE (
    FileName NVARCHAR(255),
    FileDetails NVARCHAR(500)
);
DECLARE @FileDetails TABLE (
    FileName NVARCHAR(255),
    FileDate DATETIME
);
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @SelectedFile NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @SQL NVARCHAR(MAX);

-- Get the list of files with details (name and last modified date)
SET @Command = 'DIR "' + @FolderPath + '" /T:W /A:-D'; -- Include details (last modified date and time)
INSERT INTO @Files (FileDetails)
EXEC xp_cmdshell @Command;

-- Remove NULL or system messages from the output
DELETE FROM @Files WHERE FileDetails IS NULL OR FileDetails = '';

-- Parse file details and populate FileDetails table
INSERT INTO @FileDetails (FileName, FileDate)
SELECT 
    -- Extract file name from the 40th character onward (adjust as needed based on DIR format)
    TRIM(SUBSTRING(FileDetails, 40, LEN(FileDetails))) AS FileName,
    -- Extract and convert date and time from the first part of the line
    TRY_CONVERT(DATETIME, LEFT(FileDetails, 20)) AS FileDate
FROM @Files
WHERE 
    FileDetails LIKE '[0-9][0-9]/[0-9][0-9]/[0-9][0-9]%'; -- Match rows that start with date format (e.g., MM/DD/YY)

-- Select the file with today's date
SELECT TOP 1 @SelectedFile = FileName
FROM @FileDetails
WHERE CAST(FileDate AS DATE) = @CurrentDate;

IF @SelectedFile IS NULL
BEGIN
    PRINT 'No file found for today''s date.';
    RETURN;
END

-- Full file path
SET @FullFilePath = @FolderPath + @SelectedFile;

-- Create a staging table for the file's data
IF OBJECT_ID('tempdb..#StagingTable') IS NOT NULL
    DROP TABLE #StagingTable;

CREATE TABLE #StagingTable (
    Column1 NVARCHAR(50),
    Column2 NVARCHAR(50),
    Column3 NVARCHAR(50)
    -- Add more columns as needed
);

-- Load data from the file into the staging table
SET @SQL = CONCAT(
    'BULK INSERT #StagingTable ',
    'FROM ''', @FullFilePath, ''' ',
    'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
);

EXEC sp_executesql @SQL;

-- Process the data (e.g., insert into the main table)
INSERT INTO YourMainTable (Column1, Column2, Column3)
SELECT Column1, Column2, Column3
FROM #StagingTable;

-- Clean up
DROP TABLE #StagingTable;

PRINT 'File processed successfully: ' + @SelectedFile;
