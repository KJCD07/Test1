using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using Microsoft.IdentityModel.Tokens;

public class TokenGenerator
{
    public static string GenerateBearerToken(string clientId, string clientSecret, string authenticationServer)
    {
        // Generate RSA-216 Key Pair
        using (RSA rsa = RSA.Create(216))
        {
            // Create RSA parameters
            RSAParameters rsaParams = new RSAParameters();
            
            // Add your client secret here (Note: This should be securely stored)
            rsaParams.D = Convert.FromBase64String(clientSecret); // Assuming your client secret is Base64 encoded

            rsa.ImportParameters(rsaParams);

            // Create token handler
            var tokenHandler = new JwtSecurityTokenHandler();

            // Create JWT token descriptor
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim("client_id", clientId)
                }),
                Expires = DateTime.UtcNow.AddMinutes(60), // Token expiry time
                SigningCredentials = new SigningCredentials(new RsaSecurityKey(rsa), SecurityAlgorithms.RsaSha256Signature)
            };

            // Create token
            var token = tokenHandler.CreateToken(tokenDescriptor);

            // Return token
            return tokenHandler.WriteToken(token);
        }
    }
}




using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string clientId = "your_client_id";
        string clientSecret = "your_client_secret";
        string authServer = "https://your_auth_server";

        string token = await GenerateBearerToken(clientId, clientSecret, authServer);

        Console.WriteLine("Bearer Token: " + token);
    }

    static async Task<string> GenerateBearerToken(string clientId, string clientSecret, string authServer)
    {
        string tokenEndpoint = $"{authServer}/token";

        using (var httpClient = new HttpClient())
        {
            var requestContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("client_id", clientId),
                new KeyValuePair<string, string>("client_secret", clientSecret),
                new KeyValuePair<string, string>("grant_type", "client_credentials")
            });

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Token successfully retrieved
                return responseContent;
            }
            else
            {
                // Handle error
                Console.WriteLine("Failed to retrieve token. Error: " + responseContent);
                return null;
            }
        }
    }
}

using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string token = await GetBearerToken();
        Console.WriteLine("Bearer Token: " + token);
    }

    static async Task<string> GetBearerToken()
    {
        string tokenEndpoint = "https://example.com/oauth2/token";
        string clientId = "your_client_id";
        string clientSecret = "your_client_secret";
        string scope = "read write"; // Optional scope

        using (var httpClient = new HttpClient())
        {
            var requestContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("grant_type", "client_credentials"),
                new KeyValuePair<string, string>("client_id", clientId),
                new KeyValuePair<string, string>("client_secret", clientSecret),
                new KeyValuePair<string, string>("scope", scope)
            });

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Parse the JSON response to extract the bearer token
                var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);
                return tokenResponse.AccessToken;
            }
            else
            {
                Console.WriteLine("Failed to retrieve token. Error: " + responseContent);
                return null;
            }
        }
    }

    // Define a class to represent the token response
    public class TokenResponse
    {
        public string AccessToken { get; set; }
        public string TokenType { get; set; }
        public int ExpiresIn { get; set; }
    }
}


https://learn-attachment.microsoft.com/api/attachments/73157-1.png?platform=QnA








DECLARE @HTMLBody NVARCHAR(MAX);

-- Query to generate HTML table
SET @HTMLBody = 
N'<html>
<head>
<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
    .active {
        background-color: #d4edda;
    }
    .inactive {
        background-color: #f8d7da;
    }
</style>
</head>
<body>
<h3>SQL Data Report</h3>
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>'

-- Generate table rows
SELECT @HTMLBody += 
N'<tr' + 
    CASE 
        WHEN Status = 'Active' THEN ' class="active"'
        WHEN Status = 'Inactive' THEN ' class="inactive"'
        ELSE '' 
    END + 
N'><td>' + CAST(ID AS NVARCHAR) + 
N'</td><td>' + Name + 
N'</td><td>' + Category + 
N'</td><td>' + Status + 
N'</td></tr>'
FROM YourTable;

-- Close the table
SET @HTMLBody += 
N'</tbody>
</table>
</body>
</html>'

-- Send Email
EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourMailProfile',
    @recipients = 'recipient@example.com',
    @subject = 'SQL Data Report',
    @body = @HTMLBody,
    @body_format = 'HTML';






DECLARE @HTMLBody NVARCHAR(MAX);

-- Query to generate the HTML table
SET @HTMLBody = 
N'<html>
<head>
<style>
    table {
        border: 1px solid black;
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
</style>
</head>
<body>
<h3>SQL Data Report</h3>
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>'

-- Generate table rows
SELECT @HTMLBody += 
N'<tr>
    <td>' + CAST(ID AS NVARCHAR) + N'</td>
    <td>' + Name + N'</td>
    <td>' + Category + N'</td>
    <td>' + Status + N'</td>
</tr>'
FROM YourTable;

-- Close the table
SET @HTMLBody += 
N'</tbody>
</table>
</body>
</html>'

-- Send Email
EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourMailProfile',
    @recipients = 'recipient@example.com',
    @subject = 'SQL Data Report',
    @body = @HTMLBody,
    @body_format = 'HTML';




***********************


-- Step 1: Create a temporary table to store the data from the text file
CREATE TABLE #TempTable (
    Column1 VARCHAR(255),
    Column2 VARCHAR(255),
    Column3 VARCHAR(255), -- 3rd column you want
    Column4 VARCHAR(255)
);

-- Step 2: Bulk Insert data from the text file into the temporary table
BULK INSERT #TempTable
FROM 'C:\path\to\your\file.txt'
WITH (
    FIELDTERMINATOR = ',',  -- Change to the actual delimiter in your file
    ROWTERMINATOR = '\n',  -- Adjust this if needed (e.g., for Windows it's '\r\n')
    FIRSTROW = 2  -- Assuming the first row is a header
);

-- Step 3: Compare Table A with the 3rd column from the Temp Table
-- Find missing records from TableA (records in TableA but not in TempTable)
SELECT A.Column3
FROM TableA A
LEFT JOIN #TempTable Temp ON A.Column3 = Temp.Column3
WHERE Temp.Column3 IS NULL;  -- Missing records from TempTable

-- Step 4: Prepare the missing records email body
DECLARE @MissingRecords NVARCHAR(MAX);
DECLARE @EmailBody NVARCHAR(MAX);

-- Collect missing records into a string
SELECT @MissingRecords = STRING_AGG(A.Column3, ', ') 
FROM TableA A
LEFT JOIN #TempTable Temp ON A.Column3 = Temp.Column3
WHERE Temp.Column3 IS NULL;

-- Construct the HTML email body with better description and formatting
SET @EmailBody = '
    <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; font-size: 12px; color: #333; }
                table { border-collapse: collapse; width: 100%; margin-top: 20px; }
                th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
                th { background-color: #f2f2f2; color: #333; }
                h2 { color: #0073e6; }
                .content { margin-bottom: 20px; }
            </style>
        </head>
        <body>
            <h2>Missing Records from Table A</h2>
            <p class="content">
                Dear Team,
            </p>
            <p class="content">
                Please find below the list of records from <b>Table A</b> that are missing in the temporary table (<b>#TempTable</b>). These records need further review or may require data insertion into the temporary table for processing.
            </p>
            <table>
                <tr>
                    <th>Missing Record(s)</th>
                </tr>';

-- Add each missing record as a row in the table
SET @EmailBody = @EmailBody + 
    (SELECT STRING_AGG('<tr><td>' + Column3 + '</td></tr>', '') 
     FROM TableA A
     LEFT JOIN #TempTable Temp ON A.Column3 = Temp.Column3
     WHERE Temp.Column3 IS NULL);

-- Add closing HTML tags
SET @EmailBody = @EmailBody + '
            </table>
            <p class="content">
                Kindly review and take the necessary actions to ensure data consistency.
            </p>
            <p class="content">
                Best regards,<br/>
                [Your Name or Your Team Name]<br/>
                [Your Contact Information or Department Name]
            </p>
        </body>
    </html>';

-- Step 5: Send email with the missing records list (HTML formatted)
EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourMailProfile',  -- Make sure to configure Database Mail first
    @recipients = 'someone@example.com',
    @subject = 'Missing Records in Temp Table',
    @body = @EmailBody,
    @body_format = 'HTML';  -- This ensures the email is sent as HTML

-- Step 6: Clean up
DROP TABLE #TempTable;













***********************



-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\DataFiles\Archive\'; -- Adjust folder path
DECLARE @CurrentDate NVARCHAR(10) = CONVERT(VARCHAR(10), GETDATE(), 120); -- YYYY-MM-DD format
DECLARE @Command NVARCHAR(4000);
DECLARE @FileList TABLE (FileName NVARCHAR(255), LastModifiedDate DATETIME);

-- Get the list of files in the folder with last modified date
SET @Command = 'DIR "' + @FolderPath + '" /T:W /A:-D /O:D';
INSERT INTO @FileList (FileName, LastModifiedDate)
EXEC xp_cmdshell @Command;

-- Filter the file modified on the current date
DECLARE @CurrentFile NVARCHAR(255);
SELECT TOP 1 @CurrentFile = FileName
FROM @FileList
WHERE CONVERT(VARCHAR(10), LastModifiedDate, 120) = @CurrentDate
  AND FileName LIKE '%.csv';

IF @CurrentFile IS NULL
BEGIN
    PRINT 'No file found for the current date.';
    RETURN;
END

-- Full file path
DECLARE @FullFilePath NVARCHAR(4000) = @FolderPath + @CurrentFile;

-- Create a staging table for the file's data
IF OBJECT_ID('tempdb..#StagingTable') IS NOT NULL
    DROP TABLE #StagingTable;

CREATE TABLE #StagingTable (
    Column1 NVARCHAR(50),
    Column2 NVARCHAR(50),
    Column3 NVARCHAR(50)
    -- Add more columns as needed
);

-- Load data from the file into the staging table
DECLARE @SQL NVARCHAR(MAX);
SET @SQL = CONCAT(
    'BULK INSERT #StagingTable ',
    'FROM ''', @FullFilePath, ''' ',
    'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
);

EXEC sp_executesql @SQL;

-- Process the data (e.g., insert into the main table)
INSERT INTO YourMainTable (Column1, Column2, Column3)
SELECT Column1, Column2, Column3
FROM #StagingTable;

-- Clean up
DROP TABLE #StagingTable;

PRINT 'File processed successfully: ' + @FullFilePath;



********************************





************************************************************************************************************



-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\ArchiveFolder\'; -- Set your folder path here
DECLARE @Command NVARCHAR(500);
DECLARE @Files TABLE (
    FileName NVARCHAR(255),
    FileDate DATETIME
);
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @SelectedFile NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @SQL NVARCHAR(MAX);

-- Get the list of files with their details (name and last modified date)
SET @Command = 'DIR "' + @FolderPath + '" /T:W /A:-D'; -- /T:W for last write time, /A:-D for files only
INSERT INTO @Files (FileName, FileDate)
SELECT 
    FileName = TRIM(SUBSTRING(Line, 37, 50)), -- Adjust column positions based on DIR output format
    FileDate = TRY_CONVERT(DATETIME, LEFT(Line, 20))
FROM OPENROWSET(
    BULK 'C:\Temp\DIR_Output.txt', -- Save DIR output to this file beforehand
    SINGLE_CLOB
) AS Content;

-- Filter today's file
SELECT TOP 1 @SelectedFile = FileName
FROM @Files
WHERE CAST(FileDate AS DATE) = @CurrentDate;

IF @SelectedFile IS NULL
BEGIN
    PRINT 'No file found for today''s date.';
    RETURN;
END

-- Full file path
SET @FullFilePath = @FolderPath + @SelectedFile;

-- Create a staging table for the file's data
IF OBJECT_ID('tempdb..#StagingTable') IS NOT NULL
    DROP TABLE #StagingTable;

CREATE TABLE #StagingTable (
    Column1 NVARCHAR(50),
    Column2 NVARCHAR(50),
    Column3 NVARCHAR(50)
    -- Add more columns as needed
);

-- Load data from the file into the staging table
SET @SQL = CONCAT(
    'BULK INSERT #StagingTable ',
    'FROM ''', @FullFilePath, ''' ',
    'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
);

EXEC sp_executesql @SQL;

-- Process the data (e.g., insert into the main table)
INSERT INTO YourMainTable (Column1, Column2, Column3)
SELECT Column1, Column2, Column3
FROM #StagingTable;

-- Clean up
DROP TABLE #StagingTable;

PRINT 'File processed successfully: ' + @SelectedFile;



**************************


-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\ArchiveFolder\'; -- Set your folder path here
DECLARE @Command NVARCHAR(500);
DECLARE @Files TABLE (
    FileName NVARCHAR(255)
);
DECLARE @FileDetails TABLE (
    FileName NVARCHAR(255),
    FileDate DATETIME
);
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @SelectedFile NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @SQL NVARCHAR(MAX);

-- Get the list of files in the folder
SET @Command = 'DIR "' + @FolderPath + '" /T:W /A:-D /B'; -- Get file names in bare format
INSERT INTO @Files (FileName)
EXEC xp_cmdshell @Command;

-- Remove NULL or system messages from the output
DELETE FROM @Files WHERE FileName IS NULL OR FileName = '';

-- Loop through files to get their modification dates
DECLARE @FileName NVARCHAR(255);
DECLARE cur CURSOR FOR SELECT FileName FROM @Files;
OPEN cur;

FETCH NEXT FROM cur INTO @FileName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Get detailed file information
    SET @Command = 'DIR "' + @FolderPath + @FileName + '" /T:W';
    DECLARE @FileInfo TABLE (Line NVARCHAR(MAX));
    INSERT INTO @FileInfo (Line)
    EXEC xp_cmdshell @Command;

    -- Parse the file modification date
    DECLARE @FileDate DATETIME;
    SELECT TOP 1 
        @FileDate = TRY_CONVERT(DATETIME, SUBSTRING(Line, 1, 20)) -- Extract date from the first part of the DIR output
    FROM @FileInfo
    WHERE Line LIKE '% AM%' OR Line LIKE '% PM%';

    -- Add file details to the FileDetails table
    IF @FileDate IS NOT NULL
        INSERT INTO @FileDetails (FileName, FileDate)
        VALUES (@FileName, @FileDate);

    FETCH NEXT FROM cur INTO @FileName;
END

CLOSE cur;
DEALLOCATE cur;

-- Select the file with today's date
SELECT TOP 1 @SelectedFile = FileName
FROM @FileDetails
WHERE CAST(FileDate AS DATE) = @CurrentDate;

IF @SelectedFile IS NULL
BEGIN
    PRINT 'No file found for today''s date.';
    RETURN;
END

-- Full file path
SET @FullFilePath = @FolderPath + @SelectedFile;

-- Create a staging table for the file's data
IF OBJECT_ID('tempdb..#StagingTable') IS NOT NULL
    DROP TABLE #StagingTable;

CREATE TABLE #StagingTable (
    Column1 NVARCHAR(50),
    Column2 NVARCHAR(50),
    Column3 NVARCHAR(50)
    -- Add more columns as needed
);

-- Load data from the file into the staging table
SET @SQL = CONCAT(
    'BULK INSERT #StagingTable ',
    'FROM ''', @FullFilePath, ''' ',
    'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
);

EXEC sp_executesql @SQL;

-- Process the data (e.g., insert into the main table)
INSERT INTO YourMainTable (Column1, Column2, Column3)
SELECT Column1, Column2, Column3
FROM #StagingTable;

-- Clean up
DROP TABLE #StagingTable;

PRINT 'File processed successfully: ' + @SelectedFile;





********************************************************************************************************************************************************












-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\ArchiveFolder\'; -- Set your folder path here
DECLARE @Command NVARCHAR(500);
DECLARE @Files TABLE (
    FileName NVARCHAR(255)
);
DECLARE @FileDetails TABLE (
    FileName NVARCHAR(255),
    FileDate DATETIME
);
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @SelectedFile NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @SQL NVARCHAR(MAX);

-- Get the list of files in the folder with details
SET @Command = 'DIR "' + @FolderPath + '" /T:W /A:-D'; -- Include details (last modified date and time)
INSERT INTO @Files (FileName)
EXEC xp_cmdshell @Command;

-- Remove NULL or system messages from the output
DELETE FROM @Files WHERE FileName IS NULL OR FileName = '';

-- Parse file details (name and last modified date)
INSERT INTO @FileDetails (FileName, FileDate)
SELECT 
    -- Extract file name from the 40th character onward
    TRIM(SUBSTRING(Line, 40, LEN(Line))) AS FileName,
    -- Extract and convert date and time from the first part of the line
    TRY_CONVERT(DATETIME, LEFT(Line, 20)) AS FileDate
FROM @Files
WHERE 
    Line LIKE '[0-9][0-9]/[0-9][0-9]/[0-9][0-9]%'; -- Match rows that start with date format (e.g., MM/DD/YY)

-- Select the file with today's date
SELECT TOP 1 @SelectedFile = FileName
FROM @FileDetails
WHERE CAST(FileDate AS DATE) = @CurrentDate;

IF @SelectedFile IS NULL
BEGIN
    PRINT 'No file found for today''s date.';
    RETURN;
END

-- Full file path
SET @FullFilePath = @FolderPath + @SelectedFile;

-- Create a staging table for the file's data
IF OBJECT_ID('tempdb..#StagingTable') IS NOT NULL
    DROP TABLE #StagingTable;

CREATE TABLE #StagingTable (
    Column1 NVARCHAR(50),
    Column2 NVARCHAR(50),
    Column3 NVARCHAR(50)
    -- Add more columns as needed
);

-- Load data from the file into the staging table
SET @SQL = CONCAT(
    'BULK INSERT #StagingTable ',
    'FROM ''', @FullFilePath, ''' ',
    'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
);

EXEC sp_executesql @SQL;

-- Process the data (e.g., insert into the main table)
INSERT INTO YourMainTable (Column1, Column2, Column3)
SELECT Column1, Column2, Column3
FROM #StagingTable;

-- Clean up
DROP TABLE #StagingTable;

PRINT 'File processed successfully: ' + @SelectedFile;




























