import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.Console;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.KeyStore;

public class UpdateAndReadJceksPassword {
    public static void main(String[] args) {
        try {
            // File location
            String keystorePath = "mykeystore.jceks";

            // Use Console to get secure input
            Console console = System.console();
            if (console == null) {
                System.err.println("No console available. Run from terminal.");
                return;
            }

            char[] keystorePassword = console.readPassword("Enter keystore password: ");
            String alias = console.readLine("Enter alias name: ");
            String secretPassword = new String(console.readPassword("Enter secret password to store: "));

            // Load or create JCEKS keystore
            KeyStore keyStore = KeyStore.getInstance("JCEKS");
            try (FileInputStream fis = new FileInputStream(keystorePath)) {
                keyStore.load(fis, keystorePassword);
            } catch (Exception e) {
                System.out.println("Keystore not found, creating new one...");
                keyStore.load(null, keystorePassword);
            }

            // Create secret key
            SecretKey secretKey = new SecretKeySpec(secretPassword.getBytes(), "PBE");
            KeyStore.SecretKeyEntry secretEntry = new KeyStore.SecretKeyEntry(secretKey);
            KeyStore.ProtectionParameter protParam = new KeyStore.PasswordProtection(keystorePassword);
            keyStore.setEntry(alias, secretEntry, protParam);

            // Save keystore
            try (FileOutputStream fos = new FileOutputStream(keystorePath)) {
                keyStore.store(fos, keystorePassword);
            }

            System.out.println("Password stored successfully.");

            // Reading the password back
            KeyStore.SecretKeyEntry readEntry = (KeyStore.SecretKeyEntry) keyStore.getEntry(alias, protParam);
            SecretKey readKey = readEntry.getSecretKey();
            String recoveredPassword = new String(readKey.getEncoded());
            System.out.println("Recovered password from keystore: " + recoveredPassword);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
