-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\ArchiveFolder\'; -- Set your folder path here
DECLARE @Command NVARCHAR(500);
DECLARE @Files TABLE (
    FileName NVARCHAR(255),
    FileDetails NVARCHAR(500)
);
DECLARE @FileDetails TABLE (
    FileName NVARCHAR(255),
    FileDate DATETIME
);
DECLARE @CurrentDate DATE = CAST(GETDATE() AS DATE);
DECLARE @SelectedFile NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @SQL NVARCHAR(MAX);

-- Get the list of files with details (name and last modified date)
SET @Command = 'DIR "' + @FolderPath + '" /T:W /A:-D'; -- Include details (last modified date and time)
INSERT INTO @Files (FileDetails)
EXEC xp_cmdshell @Command;

-- Remove NULL or system messages from the output
DELETE FROM @Files WHERE FileDetails IS NULL OR FileDetails = '';

-- Parse file details and populate FileDetails table
INSERT INTO @FileDetails (FileName, FileDate)
SELECT 
    -- Extract file name from the 40th character onward (adjust as needed based on DIR format)
    TRIM(SUBSTRING(FileDetails, 40, LEN(FileDetails))) AS FileName,
    -- Extract and convert date and time from the first part of the line
    TRY_CONVERT(DATETIME, LEFT(FileDetails, 20)) AS FileDate
FROM @Files
WHERE 
    FileDetails LIKE '[0-9][0-9]/[0-9][0-9]/[0-9][0-9]%'; -- Match rows that start with date format (e.g., MM/DD/YY)

-- Select the file with today's date
SELECT TOP 1 @SelectedFile = FileName
FROM @FileDetails
WHERE CAST(FileDate AS DATE) = @CurrentDate;

IF @SelectedFile IS NULL
BEGIN
    PRINT 'No file found for today''s date.';
    RETURN;
END

-- Full file path
SET @FullFilePath = @FolderPath + @SelectedFile;

-- Create a staging table for the file's data
IF OBJECT_ID('tempdb..#StagingTable') IS NOT NULL
    DROP TABLE #StagingTable;

CREATE TABLE #StagingTable (
    Column1 NVARCHAR(50),
    Column2 NVARCHAR(50),
    Column3 NVARCHAR(50)
    -- Add more columns as needed
);

-- Load data from the file into the staging table
SET @SQL = CONCAT(
    'BULK INSERT #StagingTable ',
    'FROM ''', @FullFilePath, ''' ',
    'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
);

EXEC sp_executesql @SQL;

-- Process the data (e.g., insert into the main table)
INSERT INTO YourMainTable (Column1, Column2, Column3)
SELECT Column1, Column2, Column3
FROM #StagingTable;

-- Clean up
DROP TABLE #StagingTable;

PRINT 'File processed successfully: ' + @SelectedFile;






*************************************************************************************************


-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\FileFolder\'; -- Set your folder path here
DECLARE @FileName NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @Command NVARCHAR(500);
DECLARE @FileExists INT;
DECLARE @SQL NVARCHAR(MAX);

-- Table to hold validation results
IF OBJECT_ID('tempdb..#ValidationResults') IS NOT NULL
    DROP TABLE #ValidationResults;

CREATE TABLE #ValidationResults (
    FileName NVARCHAR(255),
    Status NVARCHAR(50) -- Valid, Invalid, Not Found
);

-- Cursor to iterate through filenames in the table
DECLARE file_cursor CURSOR FOR 
SELECT FileName FROM FileTable; -- Replace with your table name

OPEN file_cursor;
FETCH NEXT FROM file_cursor INTO @FileName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Construct the full file path
    SET @FullFilePath = @FolderPath + @FileName;

    -- Check if the file exists
    SET @Command = 'IF EXIST "' + @FullFilePath + '" (EXIT 0) ELSE (EXIT 1)';
    EXEC @FileExists = xp_cmdshell @Command;

    IF (@FileExists IS NOT NULL AND @FileExists = 0)
    BEGIN
        -- Check if the file contains valid data
        BEGIN TRY
            -- Use BULK INSERT to attempt loading the file into a temporary table
            IF OBJECT_ID('tempdb..#TempFileData') IS NOT NULL
                DROP TABLE #TempFileData;

            CREATE TABLE #TempFileData (
                Column1 NVARCHAR(255),
                Column2 NVARCHAR(255),
                Column3 NVARCHAR(255) -- Adjust columns as per your file structure
            );

            SET @SQL = CONCAT(
                'BULK INSERT #TempFileData ',
                'FROM ''', @FullFilePath, ''' ',
                'WITH (FIRSTROW = 2, FIELDTERMINATOR = '','', ROWTERMINATOR = ''\n'');'
            );

            EXEC sp_executesql @SQL;

            -- If rows are present, file is valid
            IF EXISTS (SELECT 1 FROM #TempFileData)
                INSERT INTO #ValidationResults (FileName, Status)
                VALUES (@FileName, 'Valid');
            ELSE
                INSERT INTO #ValidationResults (FileName, Status)
                VALUES (@FileName, 'Invalid');

            -- Clean up temporary table
            DROP TABLE #TempFileData;
        END TRY
        BEGIN CATCH
            -- If BULK INSERT fails, mark file as Invalid
            INSERT INTO #ValidationResults (FileName, Status)
            VALUES (@FileName, 'Invalid');
        END CATCH
    END
    ELSE
    BEGIN
        -- File not found
        INSERT INTO #ValidationResults (FileName, Status)
        VALUES (@FileName, 'Not Found');
    END

    -- Fetch the next file
    FETCH NEXT FROM file_cursor INTO @FileName;
END

CLOSE file_cursor;
DEALLOCATE file_cursor;

-- Display results
SELECT * FROM #ValidationResults;

-- Clean up
DROP TABLE #ValidationResults;



*******************************************************************************






-- Enable xp_cmdshell if not already enabled
EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'xp_cmdshell', 1;
RECONFIGURE;

-- Variables
DECLARE @FolderPath NVARCHAR(255) = 'C:\FileFolder\'; -- Set your folder path here
DECLARE @FileName NVARCHAR(255);
DECLARE @FullFilePath NVARCHAR(500);
DECLARE @Command NVARCHAR(500);
DECLARE @HDRExists INT;
DECLARE @TRLExists INT;

-- Table to store results
IF OBJECT_ID('tempdb..#FileValidation') IS NOT NULL
    DROP TABLE #FileValidation;

CREATE TABLE #FileValidation (
    FileName NVARCHAR(255),
    HDRStatus NVARCHAR(50), -- Present or Not Found
    TRLStatus NVARCHAR(50)  -- Present or Not Found
);

-- Cursor to iterate through filenames in the table
DECLARE file_cursor CURSOR FOR 
SELECT FileName FROM FileTable; -- Replace with your table name

OPEN file_cursor;
FETCH NEXT FROM file_cursor INTO @FileName;

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Construct the full file path
    SET @FullFilePath = @FolderPath + @FileName;

    -- Check if the file contains "HDR"
    SET @Command = 'FINDSTR "HDR" "' + @FullFilePath + '"';
    EXEC @HDRExists = xp_cmdshell @Command;

    -- Check if the file contains "TRL"
    SET @Command = 'FINDSTR "TRL" "' + @FullFilePath + '"';
    EXEC @TRLExists = xp_cmdshell @Command;

    -- Insert results into validation table
    INSERT INTO #FileValidation (FileName, HDRStatus, TRLStatus)
    VALUES (
        @FileName,
        CASE WHEN @HDRExists IS NOT NULL AND @HDRExists = 0 THEN 'Present' ELSE 'Not Found' END,
        CASE WHEN @TRLExists IS NOT NULL AND @TRLExists = 0 THEN 'Present' ELSE 'Not Found' END
    );

    -- Fetch the next file
    FETCH NEXT FROM file_cursor INTO @FileName;
END

CLOSE file_cursor;
DEALLOCATE file_cursor;

-- Display results
SELECT * FROM #FileValidation;

-- Clean up
DROP TABLE #FileValidation;











******************************************************************************************************************************



-- Variables
DECLARE @EmailBody NVARCHAR(MAX);
DECLARE @Subject NVARCHAR(255);
DECLARE @Recipient NVARCHAR(255) = 'enduser@example.com'; -- Replace with the actual recipient email
DECLARE @ValidFileExists INT;

-- Check if there are valid files in the table
SET @ValidFileExists = CASE 
    WHEN EXISTS (SELECT 1 FROM FileStatusTable WHERE Status = 'Valid') THEN 1
    ELSE 0
END;

-- If there are no invalid files, send a different notification
IF NOT EXISTS (SELECT 1 FROM FileStatusTable WHERE Status = 'Invalid')
BEGIN
    SET @Subject = 'File Status Report - No Invalid Files';
    SET @EmailBody = '<html><body>';
    SET @EmailBody = @EmailBody + '<h2>All files are valid</h2>';
    SET @EmailBody = @EmailBody + '<p>No invalid files were found in the system.</p>';
    SET @EmailBody = @EmailBody + '<p>Regards,<br>Your SQL System</p>';
    SET @EmailBody = @EmailBody + '</body></html>';

    -- Send email
    EXEC msdb.dbo.sp_send_dbmail
        @profile_name = 'YourDatabaseMailProfile', -- Replace with your Database Mail profile name
        @recipients = @Recipient,
        @subject = @Subject,
        @body = @EmailBody,
        @body_format = 'HTML';

    PRINT 'No invalid files found. Email sent.';
    RETURN; -- Exit the script since no invalid files are present
END;

-- If there are invalid files, build the email body
SET @EmailBody = '<html><body>';
SET @EmailBody = @EmailBody + '<h2>Invalid File Details</h2>';
SET @EmailBody = @EmailBody + '<table border="1" cellpadding="5" cellspacing="0" style="border-collapse:collapse;">';
SET @EmailBody = @EmailBody + '<tr><th>File Name</th><th>Status</th></tr>';

-- Loop through invalid file details and append them to the email body
SELECT @EmailBody = @EmailBody +
    '<tr><td>' + FileName + '</td><td>' + Status + '</td></tr>'
FROM FileStatusTable
WHERE Status = 'Invalid';

SET @EmailBody = @EmailBody + '</table>';
SET @EmailBody = @EmailBody + '<p>Regards,<br>Your SQL System</p>';
SET @EmailBody = @EmailBody + '</body></html>';

-- Send the email for invalid files
SET @Subject = 'File Status Report - Invalid Files';

EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourDatabaseMailProfile', -- Replace with your Database Mail profile name
    @recipients = @Recipient,
    @subject = @Subject,
    @body = @EmailBody,
    @body_format = 'HTML';

PRINT 'Invalid files found. Email sent.';









SET @Command = 'COPY "' + @SourcePath + @FileName + '" "' + @DestinationPath + '"';


















