using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using Microsoft.IdentityModel.Tokens;

public class TokenGenerator
{
    public static string GenerateBearerToken(string clientId, string clientSecret, string authenticationServer)
    {
        // Generate RSA-216 Key Pair
        using (RSA rsa = RSA.Create(216))
        {
            // Create RSA parameters
            RSAParameters rsaParams = new RSAParameters();
            
            // Add your client secret here (Note: This should be securely stored)
            rsaParams.D = Convert.FromBase64String(clientSecret); // Assuming your client secret is Base64 encoded

            rsa.ImportParameters(rsaParams);

            // Create token handler
            var tokenHandler = new JwtSecurityTokenHandler();

            // Create JWT token descriptor
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new Claim[]
                {
                    new Claim("client_id", clientId)
                }),
                Expires = DateTime.UtcNow.AddMinutes(60), // Token expiry time
                SigningCredentials = new SigningCredentials(new RsaSecurityKey(rsa), SecurityAlgorithms.RsaSha256Signature)
            };

            // Create token
            var token = tokenHandler.CreateToken(tokenDescriptor);

            // Return token
            return tokenHandler.WriteToken(token);
        }
    }
}




using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string clientId = "your_client_id";
        string clientSecret = "your_client_secret";
        string authServer = "https://your_auth_server";

        string token = await GenerateBearerToken(clientId, clientSecret, authServer);

        Console.WriteLine("Bearer Token: " + token);
    }

    static async Task<string> GenerateBearerToken(string clientId, string clientSecret, string authServer)
    {
        string tokenEndpoint = $"{authServer}/token";

        using (var httpClient = new HttpClient())
        {
            var requestContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("client_id", clientId),
                new KeyValuePair<string, string>("client_secret", clientSecret),
                new KeyValuePair<string, string>("grant_type", "client_credentials")
            });

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Token successfully retrieved
                return responseContent;
            }
            else
            {
                // Handle error
                Console.WriteLine("Failed to retrieve token. Error: " + responseContent);
                return null;
            }
        }
    }
}

using System;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string token = await GetBearerToken();
        Console.WriteLine("Bearer Token: " + token);
    }

    static async Task<string> GetBearerToken()
    {
        string tokenEndpoint = "https://example.com/oauth2/token";
        string clientId = "your_client_id";
        string clientSecret = "your_client_secret";
        string scope = "read write"; // Optional scope

        using (var httpClient = new HttpClient())
        {
            var requestContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("grant_type", "client_credentials"),
                new KeyValuePair<string, string>("client_id", clientId),
                new KeyValuePair<string, string>("client_secret", clientSecret),
                new KeyValuePair<string, string>("scope", scope)
            });

            var response = await httpClient.PostAsync(tokenEndpoint, requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                // Parse the JSON response to extract the bearer token
                var tokenResponse = JsonSerializer.Deserialize<TokenResponse>(responseContent);
                return tokenResponse.AccessToken;
            }
            else
            {
                Console.WriteLine("Failed to retrieve token. Error: " + responseContent);
                return null;
            }
        }
    }

    // Define a class to represent the token response
    public class TokenResponse
    {
        public string AccessToken { get; set; }
        public string TokenType { get; set; }
        public int ExpiresIn { get; set; }
    }
}


https://learn-attachment.microsoft.com/api/attachments/73157-1.png?platform=QnA








DECLARE @HTMLBody NVARCHAR(MAX);

-- Query to generate HTML table
SET @HTMLBody = 
N'<html>
<head>
<style>
    table {
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
    .active {
        background-color: #d4edda;
    }
    .inactive {
        background-color: #f8d7da;
    }
</style>
</head>
<body>
<h3>SQL Data Report</h3>
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>'

-- Generate table rows
SELECT @HTMLBody += 
N'<tr' + 
    CASE 
        WHEN Status = 'Active' THEN ' class="active"'
        WHEN Status = 'Inactive' THEN ' class="inactive"'
        ELSE '' 
    END + 
N'><td>' + CAST(ID AS NVARCHAR) + 
N'</td><td>' + Name + 
N'</td><td>' + Category + 
N'</td><td>' + Status + 
N'</td></tr>'
FROM YourTable;

-- Close the table
SET @HTMLBody += 
N'</tbody>
</table>
</body>
</html>'

-- Send Email
EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourMailProfile',
    @recipients = 'recipient@example.com',
    @subject = 'SQL Data Report',
    @body = @HTMLBody,
    @body_format = 'HTML';






DECLARE @HTMLBody NVARCHAR(MAX);

-- Query to generate the HTML table
SET @HTMLBody = 
N'<html>
<head>
<style>
    table {
        border: 1px solid black;
        border-collapse: collapse;
        width: 100%;
    }
    th, td {
        border: 1px solid black;
        padding: 8px;
        text-align: left;
    }
    th {
        background-color: #f2f2f2;
    }
</style>
</head>
<body>
<h3>SQL Data Report</h3>
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>'

-- Generate table rows
SELECT @HTMLBody += 
N'<tr>
    <td>' + CAST(ID AS NVARCHAR) + N'</td>
    <td>' + Name + N'</td>
    <td>' + Category + N'</td>
    <td>' + Status + N'</td>
</tr>'
FROM YourTable;

-- Close the table
SET @HTMLBody += 
N'</tbody>
</table>
</body>
</html>'

-- Send Email
EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourMailProfile',
    @recipients = 'recipient@example.com',
    @subject = 'SQL Data Report',
    @body = @HTMLBody,
    @body_format = 'HTML';




***********************


-- Step 1: Create a temporary table to store the data from the text file
CREATE TABLE #TempTable (
    Column1 VARCHAR(255),
    Column2 VARCHAR(255),
    Column3 VARCHAR(255), -- 3rd column you want
    Column4 VARCHAR(255)
);

-- Step 2: Bulk Insert data from the text file into the temporary table
BULK INSERT #TempTable
FROM 'C:\path\to\your\file.txt'
WITH (
    FIELDTERMINATOR = ',',  -- Change to the actual delimiter in your file
    ROWTERMINATOR = '\n',  -- Adjust this if needed (e.g., for Windows it's '\r\n')
    FIRSTROW = 2  -- Assuming the first row is a header
);

-- Step 3: Compare Table A with the 3rd column from the Temp Table
-- Find missing records from TableA (records in TableA but not in TempTable)
SELECT A.Column3
FROM TableA A
LEFT JOIN #TempTable Temp ON A.Column3 = Temp.Column3
WHERE Temp.Column3 IS NULL;  -- Missing records from TempTable

-- Step 4: Prepare the missing records email body
DECLARE @MissingRecords NVARCHAR(MAX);
DECLARE @EmailBody NVARCHAR(MAX);

-- Collect missing records into a string
SELECT @MissingRecords = STRING_AGG(A.Column3, ', ') 
FROM TableA A
LEFT JOIN #TempTable Temp ON A.Column3 = Temp.Column3
WHERE Temp.Column3 IS NULL;

-- Construct the HTML email body with better description and formatting
SET @EmailBody = '
    <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; font-size: 12px; color: #333; }
                table { border-collapse: collapse; width: 100%; margin-top: 20px; }
                th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }
                th { background-color: #f2f2f2; color: #333; }
                h2 { color: #0073e6; }
                .content { margin-bottom: 20px; }
            </style>
        </head>
        <body>
            <h2>Missing Records from Table A</h2>
            <p class="content">
                Dear Team,
            </p>
            <p class="content">
                Please find below the list of records from <b>Table A</b> that are missing in the temporary table (<b>#TempTable</b>). These records need further review or may require data insertion into the temporary table for processing.
            </p>
            <table>
                <tr>
                    <th>Missing Record(s)</th>
                </tr>';

-- Add each missing record as a row in the table
SET @EmailBody = @EmailBody + 
    (SELECT STRING_AGG('<tr><td>' + Column3 + '</td></tr>', '') 
     FROM TableA A
     LEFT JOIN #TempTable Temp ON A.Column3 = Temp.Column3
     WHERE Temp.Column3 IS NULL);

-- Add closing HTML tags
SET @EmailBody = @EmailBody + '
            </table>
            <p class="content">
                Kindly review and take the necessary actions to ensure data consistency.
            </p>
            <p class="content">
                Best regards,<br/>
                [Your Name or Your Team Name]<br/>
                [Your Contact Information or Department Name]
            </p>
        </body>
    </html>';

-- Step 5: Send email with the missing records list (HTML formatted)
EXEC msdb.dbo.sp_send_dbmail
    @profile_name = 'YourMailProfile',  -- Make sure to configure Database Mail first
    @recipients = 'someone@example.com',
    @subject = 'Missing Records in Temp Table',
    @body = @EmailBody,
    @body_format = 'HTML';  -- This ensures the email is sent as HTML

-- Step 6: Clean up
DROP TABLE #TempTable;












