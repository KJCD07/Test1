
Ensure you are on your feature branch: First, switch to your feature branch by running:
git checkout feature-branch

Fetch the latest changes from the remote: Fetch the latest code from the remote repository (this pulls all changes, but doesn’t merge them):

git fetch origin

Merge the latest changes from master into your feature branch: Now, merge the master branch into your feature branch:
git merge origin/master

This will bring in all the changes that were made to the master branch into your current feature branch.

Resolve any conflicts (if necessary): If there are any merge conflicts, Git will notify you. You’ll need to manually resolve the conflicts in the affected files. Once resolved, stage the changes:

git add <resolved-file>

After resolving all conflicts, complete the merge with:

git merge --continue

Push the changes to the remote feature branch: After successfully merging, push the updated feature branch to the remote repository:

git push origin feature-branch



---- Rebase Option

Switch to your feature branch:
git checkout feature-branch

Fetch the latest changes:

git fetch origin

Rebase your feature branch onto master:

git rebase origin/master

Resolve any conflicts (if necessary): Similar to the merge, if there are conflicts, resolve them, stage the changes, and continue the rebase:

git add <resolved-file>

git rebase --continue

Push your feature branch: After the rebase is done, force-push (since rebase rewrites history):

git push origin feature-branch --force



Youtube link 

https://youtu.be/f1wnYdLEpgI

